{"version":3,"sources":["CurrencyConverter.js","app.js"],"names":["CurrencyConverter","base","to","target","name","descriptor","fn","value","args","result","call","currencyRate","toUpperCase","process","env","CURRENCY_CONVERTER_API_KEY","data","error","console","log","require","config","Cost","compute","qty","price","Promise","resolve","then"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,MAAMA,iBAAiB,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AACtC,SAAO,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,UAAxB,EAAoC;AACzC,QAAI;AACF,YAAMC,EAAE,GAAGD,UAAU,CAACE,KAAtB,CADE,CAC2B;;AAC7BF,MAAAA,UAAU,CAACE,KAAX,GAAmB,OAAO,GAAGC,IAAV,KAAmB;AACpC;AACA,cAAMC,MAAM,GAAG,MAAMH,EAAE,CAACI,IAAH,CAAQ,IAAR,EAAc,GAAGF,IAAjB,CAArB;AACA,cAAMG,YAAY,GAAG,MAAM,oBAAO,0DAAyDT,EAAE,CAACU,WAAH,EAAiB,IAAGX,IAAI,CAACW,WAAL,EAAmB,qBAAoBC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,EAAlK,CAA3B;AACA,eAAQJ,YAAY,CAACK,IAAb,CAAmB,GAAEd,EAAE,CAACU,WAAH,EAAiB,IAAGX,IAAI,CAACW,WAAL,EAAmB,EAA5D,EAA+D,KAA/D,IAAwEH,MAAhF;AACD,OALD;;AAOA,aAAOJ,UAAP;AACD,KAVD,CAUE,OAAOY,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAdD;AAeD,CAhBD;;eAkBejB;;;;;;;AClBf;;;;;;AAFAoB,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;IAIMC,eACH,gCAAkB,KAAlB,EAAyB,KAAzB,aADH,MAAMA,IAAN,CAAW;AAETC,EAAAA,OAAO,CAACC,GAAD,EAAMC,KAAN,EAAa;AAClB,WAAOC,OAAO,CAACC,OAAR,CAAgBH,GAAG,GAAGC,KAAtB,CAAP;AACD;;AAJQ;AAOX,MAAMA,KAAK,GAAG,IAAIH,IAAJ,EAAd;AACAG,KAAK,CAACF,OAAN,CAAc,EAAd,EAAkB,CAAlB,EAAqBK,IAArB,CAA0BnB,MAAM,IAAIS,OAAO,CAACC,GAAR,CAAYV,MAAZ,CAApC","file":"app.js","sourceRoot":"../class","sourcesContent":["import axios from 'axios';\n\nconst CurrencyConverter = (base, to) => {\n  return function (target, name, descriptor) {\n    try {\n      const fn = descriptor.value; // The original function\n      descriptor.value = async (...args) => {\n        // Define the decorator\n        const result = await fn.call(this, ...args);\n        const currencyRate = await axios(`https://free.currencyconverterapi.com/api/v6/convert?q=${to.toUpperCase()}_${base.toUpperCase()}&compact=y&apiKey=${process.env.CURRENCY_CONVERTER_API_KEY}`);\n        return (currencyRate.data[`${to.toUpperCase()}_${base.toUpperCase()}`]['val'] * result);\n      };\n\n      return descriptor;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport default CurrencyConverter;","require('dotenv').config();\n\nimport CurrencyConverter from \"./CurrencyConverter\";\n\nclass Cost {\n  @CurrencyConverter(\"NGN\", \"USD\")\n  compute(qty, price) {\n    return Promise.resolve(qty * price);\n  }\n}\n\nconst price = new Cost();\nprice.compute(20, 5).then(result => console.log(result));"]}